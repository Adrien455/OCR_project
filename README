# OCR_PROJECT

> The main goal of our application is to solve crosswords

# Structure

OCR_Project/
│
├─ datasets/
│ └─ (to store test segmented letters)
│
├─ src/
│ ├─ main.c
│ ├─ event_handler/
│ │ ├─ event_handler.c
│ │ └─ event_handler.h
│ ├─ loader/
│ │ ├─ loader.c
│ │ └─ loader.h
│ ├─ neuronal_network/
│ │ ├─ mlp.c
│ │ └─ mlp.h
│ ├─ pre_process/
│ │ ├─ pre_process.c
│ │ └─ pre_process.h
│ ├─ rotate/
│ │ ├─ rotate.c
│ │ └─ rotate.h
│ ├─ segmentation/
│ │ ├─ segmentation.c
│ │ └─ segmentation.h
│ └─ solver/
│   ├─ solver.c
│   └─ solver.h
│
├─ Tests/
│ └─ (to store test images or grids)
│
├─ .gitignore
├─ AUTHORS
├─ Makefile
└─ README

# Dependencies

- SDL2
- SDL2_Image
- c standard libraries

# Compile / Recompile

> in parent folder run 'make'

# Running

> load and image processing : in parent folder run './main ~/my_image'
> press enter key to trigger different steps
> you can manually rotate image with right and left arrows keys (note that repeating this process may deteriorate quality)
> example : './main Tests/test1.png'

> solver : in parent folder run './main --solver ~/my_grid word_to_find'
> example : './main --solver Tests/grid.txt EPITA'

> mlp : in parent folder run : './main __mlp'

# Output

> image processing : segmented letters are saved in datasets/test_image/ folder

> solver : print start and end coordinates of the word in the grid
> print the grid with word highlighted in red

> mlp : prints training process and final predictions

# Clean

> in parent folder run 'make clean'

# Code

> event_handler calls all the pre process functions when enter key is pressed

> loader.c allows the image to be loaded in an SDL application.
> Extensions handled : .bmp, .png, .jpg

> pre_process.c grayscales, denoises, binarizes.

> mlp.c learn the logical function :  Ā.B̄ + A.B and prints the results

> rotate.c detects the angle of the text and rotates it to be horizontal.
> can be done manually with an angle of 5 degrees (left or right).

> segmentation.c detects the letters and saves them in datasets/ folder.
> It separates the grid the letters of the grid and the letters of the word.
> they are ordered and indexed

> solver take a grid and a word in parameters and check if the word is in the grid.

> main.c runs everything. The flags --mlp and --solver are used to distinguish the three programs.

# Work in progress

> sometimes the grayscale function will add gray pixels between letters that are very close, which will be turned black later.
> the letters will be merged as one in the segmentation.
> enhancing the average gray computing may solve the issue, by computing the average of small areas, not whole image.

> implement character recognition algorithm.

> for now solver takes only one word in parameters. It will later takes several words as once.

> link the three programs once done

# Collaborators

Adrien Meyssonnier
Laura Picchetti
Sofiane-Youssef El Batti
